// <auto-generated />
using BookCollection.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BookCollection.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("BookCollection.Core.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(150);

                    b.Property<int>("BookCollectionId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 22, DateTimeKind.Utc));

                    b.Property<DateTime>("DeathDate");

                    b.Property<string>("DeathPlace")
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 22, DateTimeKind.Utc));

                    b.Property<string>("Pseudonym")
                        .HasMaxLength(100);

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(150);

                    b.Property<string>("WikipediaLink")
                        .HasMaxLength(150);

                    b.HasKey("AuthorId");

                    b.HasIndex("BookCollectionId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookCollection.Core.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookFormatId");

                    b.Property<int>("BookGenreId");

                    b.Property<int>("CollectionId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 22, DateTimeKind.Utc));

                    b.Property<string>("Dewey")
                        .HasMaxLength(100);

                    b.Property<string>("Isbn")
                        .HasMaxLength(100);

                    b.Property<string>("LocClassification")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 22, DateTimeKind.Utc));

                    b.Property<int?>("NumberOfPages")
                        .HasMaxLength(10);

                    b.Property<string>("Plot")
                        .HasMaxLength(400);

                    b.Property<string>("Publisher")
                        .HasMaxLength(150);

                    b.Property<DateTime>("PublisherDate");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("BookId");

                    b.HasIndex("BookFormatId");

                    b.HasIndex("BookGenreId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookCollection.Core.BookAuthor", b =>
                {
                    b.Property<int>("BookId");

                    b.Property<int>("AuthorId");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("BookCollection.Core.BookFormat", b =>
                {
                    b.Property<int>("BookFormatId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Format");

                    b.HasKey("BookFormatId");

                    b.ToTable("BookFormat");
                });

            modelBuilder.Entity("BookCollection.Core.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Genre");

                    b.HasKey("BookGenreId");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookCollection.Core.BooksCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 24, DateTimeKind.Utc));

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 24, DateTimeKind.Utc));

                    b.Property<int>("UserId");

                    b.HasKey("CollectionId");

                    b.HasIndex("UserId");

                    b.ToTable("BookCollection");
                });

            modelBuilder.Entity("BookCollection.Core.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 21, DateTimeKind.Utc));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2018, 3, 5, 5, 47, 58, 21, DateTimeKind.Utc));

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BookCollection.Core.Author", b =>
                {
                    b.HasOne("BookCollection.Core.BooksCollection", "BooksCollection")
                        .WithMany("Authors")
                        .HasForeignKey("BookCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCollection.Core.Book", b =>
                {
                    b.HasOne("BookCollection.Core.BookFormat", "BookFormat")
                        .WithMany("Books")
                        .HasForeignKey("BookFormatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCollection.Core.BookGenre", "BookGenre")
                        .WithMany("Books")
                        .HasForeignKey("BookGenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCollection.Core.BooksCollection", "Collection")
                        .WithMany("Books")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCollection.Core.BookAuthor", b =>
                {
                    b.HasOne("BookCollection.Core.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookCollection.Core.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookCollection.Core.BooksCollection", b =>
                {
                    b.HasOne("BookCollection.Core.User", "User")
                        .WithMany("BookCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
